# script-version: 2.0
# Catalyst state generated using paraview version 5.12.0
import paraview
paraview.compatibility.major = 5
paraview.compatibility.minor = 12

#### import the simple module from the paraview
from paraview.simple import *
#### disable automatic camera reset on 'Show'
paraview.simple._DisableFirstRenderCameraReset()

# ----------------------------------------------------------------
# setup views used in the visualization
# ----------------------------------------------------------------

# get the material library
materialLibrary1 = GetMaterialLibrary()

# Create a new 'Render View'
renderView1 = CreateView('RenderView')
renderView1.ViewSize = [1247, 1176]
renderView1.AxesGrid = 'Grid Axes 3D Actor'
renderView1.CenterOfRotation = [10.0, 10.0, 10.0]
renderView1.StereoType = 'Crystal Eyes'
renderView1.CameraPosition = [48.63703305156274, 48.63703305156273, 48.637033051562746]
renderView1.CameraFocalPoint = [10.0, 10.0, 10.0]
renderView1.CameraViewUp = [-0.4082482904638631, 0.816496580927726, -0.40824829046386296]
renderView1.CameraFocalDisk = 1.0
renderView1.CameraParallelScale = 17.320508075688775
renderView1.LegendGrid = 'Legend Grid Actor'
renderView1.UseColorPaletteForBackground = 0
renderView1.BackgroundColorMode = 'Gradient'
renderView1.Background2 = [0.0, 0.6666666666666666, 1.0]
renderView1.Background = [0.0, 0.0, 0.4980392156862745]
renderView1.BackEnd = 'OSPRay raycaster'
renderView1.OSPRayMaterialLibrary = materialLibrary1

# init the 'Grid Axes 3D Actor' selected for 'AxesGrid'
renderView1.AxesGrid.Visibility = 1

SetActiveView(None)

# ----------------------------------------------------------------
# setup view layouts
# ----------------------------------------------------------------

# create new layout object 'Layout #1'
layout1 = CreateLayout(name='Layout #1')
layout1.AssignView(0, renderView1)
layout1.SetSize(1247, 1176)

# ----------------------------------------------------------------
# restore active view
SetActiveView(renderView1)
# ----------------------------------------------------------------

# ----------------------------------------------------------------
# setup the data processing pipelines
# ----------------------------------------------------------------

# create a new 'PV Trivial Producer'
ippl_scalar = PVTrivialProducer(registrationName='ippl_scalar')

# ----------------------------------------------------------------
# setup the visualization in view 'renderView1'
# ----------------------------------------------------------------

# show data from ippl_scalar
ippl_scalarDisplay = Show(ippl_scalar, renderView1, 'UniformGridRepresentation')

# get 2D transfer function for 'density'
densityTF2D = GetTransferFunction2D('density')
densityTF2D.ScalarRangeInitialized = 1
densityTF2D.Range = [-1.53144766062067, 1.53144766062067, 0.0, 1.0]

# get color transfer function/color map for 'density'
densityLUT = GetColorTransferFunction('density')
densityLUT.TransferFunction2D = densityTF2D
densityLUT.RGBPoints = [-1.53144766062067, 0.001462, 0.000466, 0.013866, -1.5194349851707614, 0.002267, 0.00127, 0.01857, -1.5074253726161742, 0.003299, 0.002249, 0.024239, -1.4954126971662656, 0.004547, 0.003392, 0.030909, -1.4834030846116784, 0.006006, 0.004692, 0.038558, -1.4713904091617698, 0.007676, 0.006136, 0.046836, -1.4593807966071823, 0.009561, 0.007713, 0.055143, -1.447368121157274, 0.011663, 0.009417, 0.06346, -1.4353554457073654, 0.013995, 0.011225, 0.071862, -1.4233458331527782, 0.016561, 0.013136, 0.080282, -1.4113331577028696, 0.019373, 0.015133, 0.088767, -1.3993235451482824, 0.022447, 0.017199, 0.097327, -1.3873108696983738, 0.025793, 0.019331, 0.10593, -1.3753012571437864, 0.029432, 0.021503, 0.114621, -1.3632885816938778, 0.033385, 0.023702, 0.123397, -1.3512759062439694, 0.037668, 0.025921, 0.132232, -1.339266293689382, 0.042253, 0.028139, 0.141141, -1.3272536182394736, 0.046915, 0.030324, 0.150164, -1.3152440056848862, 0.051644, 0.032474, 0.159254, -1.3032313302349776, 0.056449, 0.034569, 0.168414, -1.2912217176803904, 0.06134, 0.03659, 0.177642, -1.2792090422304818, 0.066331, 0.038504, 0.186962, -1.2671963667805732, 0.071429, 0.040294, 0.196354, -1.255186754225986, 0.076637, 0.041905, 0.205799, -1.2431740787760774, 0.081962, 0.043328, 0.215289, -1.2311644662214902, 0.087411, 0.044556, 0.224813, -1.2191517907715816, 0.09299, 0.045583, 0.234358, -1.2071421782169944, 0.098702, 0.046402, 0.243904, -1.1951295027670858, 0.104551, 0.047008, 0.25343, -1.1831198902124984, 0.110536, 0.047399, 0.262912, -1.17110721476259, 0.116656, 0.047574, 0.272321, -1.1590945393126815, 0.122908, 0.047536, 0.281624, -1.1470849267580943, 0.129285, 0.047293, 0.290788, -1.1350722513081857, 0.135778, 0.046856, 0.299776, -1.1230626387535985, 0.142378, 0.046242, 0.308553, -1.1110499633036899, 0.149073, 0.045468, 0.317085, -1.0990403507491027, 0.15585, 0.044559, 0.325338, -1.0870276752991939, 0.162689, 0.043554, 0.333277, -1.0750149998492855, 0.169575, 0.042489, 0.340874, -1.063005387294698, 0.176493, 0.041402, 0.348111, -1.0509927118447897, 0.183429, 0.040329, 0.354971, -1.0389830992902023, 0.190367, 0.039309, 0.361447, -1.026970423840294, 0.197297, 0.0384, 0.367535, -1.0149608112857065, 0.204209, 0.037632, 0.373238, -1.0029481358357981, 0.211095, 0.03703, 0.378563, -0.9909354603858895, 0.217949, 0.036615, 0.383522, -0.9789258478313022, 0.224763, 0.036405, 0.388129, -0.9669131723813936, 0.231538, 0.036405, 0.3924, -0.9549035598268063, 0.238273, 0.036621, 0.396353, -0.9428908843768978, 0.244967, 0.037055, 0.400007, -0.9308812718223105, 0.25162, 0.037705, 0.403378, -0.9188685963724019, 0.258234, 0.038571, 0.406485, -0.9068559209224935, 0.26481, 0.039647, 0.409345, -0.8948463083679061, 0.271347, 0.040922, 0.411976, -0.8828336329179975, 0.27785, 0.042353, 0.414392, -0.8708240203634103, 0.284321, 0.043933, 0.416608, -0.8588113449135018, 0.290763, 0.045644, 0.418637, -0.8468017323589144, 0.297178, 0.04747, 0.420491, -0.834789056909006, 0.303568, 0.049396, 0.422182, -0.8227763814590974, 0.309935, 0.051407, 0.423721, -0.8107667689045102, 0.316282, 0.05349, 0.425116, -0.7987540934546016, 0.32261, 0.055634, 0.426377, -0.7867444809000144, 0.328921, 0.057827, 0.427511, -0.7747318054501058, 0.335217, 0.06006, 0.428524, -0.7627221928955186, 0.3415, 0.062325, 0.429425, -0.7507095174456099, 0.347771, 0.064616, 0.430217, -0.7386968419957014, 0.354032, 0.066925, 0.430906, -0.7266872294411141, 0.360284, 0.069247, 0.431497, -0.7146745539912056, 0.366529, 0.071579, 0.431994, -0.7026649414366183, 0.372768, 0.073915, 0.4324, -0.6906522659867098, 0.379001, 0.076253, 0.432719, -0.6786426534321225, 0.385228, 0.078591, 0.432955, -0.6666299779822138, 0.391453, 0.080927, 0.433109, -0.6546173025323053, 0.397674, 0.083257, 0.433183, -0.642607689977718, 0.403894, 0.08558, 0.433179, -0.6305950145278095, 0.410113, 0.087896, 0.433098, -0.6185854019732222, 0.416331, 0.090203, 0.432943, -0.6065727265233137, 0.422549, 0.092501, 0.432714, -0.5945631139687264, 0.428768, 0.09479, 0.432412, -0.5825504385188178, 0.434987, 0.097069, 0.432039, -0.5705408259642306, 0.441207, 0.099338, 0.431594, -0.558528150514322, 0.447428, 0.101597, 0.43108, -0.5465154750644136, 0.453651, 0.103848, 0.430498, -0.5345058625098262, 0.459875, 0.106089, 0.429846, -0.5224931870599177, 0.4661, 0.108322, 0.429125, -0.5104835745053304, 0.472328, 0.110547, 0.428334, -0.49847089905542186, 0.478558, 0.112764, 0.427475, -0.48646128650083464, 0.484789, 0.114974, 0.426548, -0.47444861105092606, 0.491022, 0.117179, 0.425552, -0.4624359356010175, 0.497257, 0.119379, 0.424488, -0.45042632304643027, 0.503493, 0.121575, 0.423356, -0.4384136475965217, 0.50973, 0.123769, 0.422156, -0.42640403504193447, 0.515967, 0.12596, 0.420887, -0.4143913595920259, 0.522206, 0.12815, 0.419549, -0.4023817470374387, 0.528444, 0.130341, 0.418142, -0.39036907158752987, 0.534683, 0.132534, 0.416667, -0.3783563961376215, 0.54092, 0.134729, 0.415123, -0.3663467835830341, 0.547157, 0.136929, 0.413511, -0.3543341081331257, 0.553392, 0.139134, 0.411829, -0.3423244955785383, 0.559624, 0.141346, 0.410078, -0.3303118201286299, 0.565854, 0.143567, 0.408258, -0.3183022075740425, 0.572081, 0.145797, 0.406369, -0.3062895321241339, 0.578304, 0.148039, 0.404411, -0.29427685667422554, 0.584521, 0.150294, 0.402385, -0.2822672441196381, 0.590734, 0.152563, 0.40029, -0.27025456866972974, 0.59694, 0.154848, 0.398125, -0.2582449561151423, 0.603139, 0.157151, 0.395891, -0.24623228066523395, 0.60933, 0.159474, 0.393589, -0.23422266811064651, 0.615513, 0.161817, 0.391219, -0.22220999266073793, 0.621685, 0.164184, 0.388781, -0.21019731721082935, 0.627847, 0.166575, 0.386276, -0.19818770465624214, 0.633998, 0.168992, 0.383704, -0.18617502920633355, 0.640135, 0.171438, 0.381065, -0.17416541665174634, 0.64626, 0.173914, 0.378359, -0.16215274120183776, 0.652369, 0.176421, 0.375586, -0.15014312864725055, 0.658463, 0.178962, 0.372748, -0.13813045319734196, 0.66454, 0.181539, 0.369846, -0.12611777774743338, 0.670599, 0.184153, 0.366879, -0.11410816519284617, 0.676638, 0.186807, 0.363849, -0.10209548974293758, 0.682656, 0.189501, 0.360757, -0.09008587718835037, 0.688653, 0.192239, 0.357603, -0.07807320173844179, 0.694627, 0.195021, 0.354388, -0.06606358918385458, 0.700576, 0.197851, 0.351113, -0.05405091373394599, 0.7065, 0.200728, 0.347777, -0.04203823828403741, 0.712396, 0.203656, 0.344383, -0.030028625729449976, 0.718264, 0.206636, 0.340931, -0.018015950279541615, 0.724103, 0.20967, 0.337424, -0.0060063377249541805, 0.729909, 0.212759, 0.333861, 0.0060063377249541805, 0.735683, 0.215906, 0.330245, 0.018015950279541837, 0.741423, 0.219112, 0.326576, 0.030028625729450198, 0.747127, 0.222378, 0.322856, 0.04203823828403741, 0.752794, 0.225706, 0.319085, 0.05405091373394577, 0.758422, 0.229097, 0.315266, 0.06606358918385435, 0.76401, 0.232554, 0.311399, 0.07807320173844179, 0.769556, 0.236077, 0.307485, 0.09008587718835037, 0.775059, 0.239667, 0.303526, 0.10209548974293736, 0.780517, 0.243327, 0.299523, 0.11410816519284617, 0.785929, 0.247056, 0.295477, 0.12611777774743338, 0.791293, 0.250856, 0.29139, 0.13813045319734196, 0.796607, 0.254728, 0.287264, 0.15014312864725032, 0.801871, 0.258674, 0.283099, 0.16215274120183776, 0.807082, 0.262692, 0.278898, 0.17416541665174634, 0.812239, 0.266786, 0.274661, 0.18617502920633355, 0.817341, 0.270954, 0.27039, 0.19818770465624236, 0.822386, 0.275197, 0.266085, 0.21019731721082935, 0.827372, 0.279517, 0.26175, 0.22220999266073793, 0.832299, 0.283913, 0.257383, 0.2342226681106463, 0.837165, 0.288385, 0.252988, 0.24623228066523395, 0.841969, 0.292933, 0.248564, 0.2582449561151423, 0.846709, 0.297559, 0.244113, 0.2702545686697295, 0.851384, 0.30226, 0.239636, 0.2822672441196383, 0.855992, 0.307038, 0.235133, 0.29427685667422554, 0.860533, 0.311892, 0.230606, 0.3062895321241339, 0.865006, 0.316822, 0.226055, 0.3183022075740425, 0.869409, 0.321827, 0.221482, 0.3303118201286299, 0.873741, 0.326906, 0.216886, 0.3423244955785383, 0.878001, 0.33206, 0.212268, 0.3543341081331255, 0.882188, 0.337287, 0.207628, 0.3663467835830343, 0.886302, 0.342586, 0.202968, 0.3783563961376215, 0.890341, 0.347957, 0.198286, 0.39036907158752987, 0.894305, 0.353399, 0.193584, 0.40238174703743845, 0.898192, 0.358911, 0.18886, 0.4143913595920259, 0.902003, 0.364492, 0.184116, 0.42640403504193447, 0.905735, 0.37014, 0.17935, 0.43841364759652146, 0.90939, 0.375856, 0.174563, 0.45042632304643027, 0.912966, 0.381636, 0.169755, 0.4624359356010175, 0.916462, 0.387481, 0.164924, 0.47444861105092584, 0.919879, 0.393389, 0.16007, 0.48646128650083464, 0.923215, 0.399359, 0.155193, 0.4984708990554221, 0.92647, 0.405389, 0.150292, 0.5104835745053304, 0.929644, 0.411479, 0.145367, 0.5224931870599174, 0.932737, 0.417627, 0.140417, 0.5345058625098262, 0.935747, 0.423831, 0.13544, 0.5465154750644137, 0.938675, 0.430091, 0.130438, 0.558528150514322, 0.941521, 0.436405, 0.125409, 0.5705408259642304, 0.944285, 0.442772, 0.120354, 0.5825504385188178, 0.946965, 0.449191, 0.115272, 0.5945631139687266, 0.949562, 0.45566, 0.110164, 0.6065727265233136, 0.952075, 0.462178, 0.105031, 0.618585401973222, 0.954506, 0.468744, 0.099874, 0.6305950145278094, 0.956852, 0.475356, 0.094695, 0.6426076899777182, 0.959114, 0.482014, 0.089499, 0.6546173025323057, 0.961293, 0.488716, 0.084289, 0.666629977982214, 0.963387, 0.495462, 0.079073, 0.6786426534321224, 0.965397, 0.502249, 0.073859, 0.6906522659867098, 0.967322, 0.509078, 0.068659, 0.7026649414366182, 0.969163, 0.515946, 0.063488, 0.7146745539912056, 0.970919, 0.522853, 0.058367, 0.726687229441114, 0.97259, 0.529798, 0.053324, 0.7386968419957014, 0.974176, 0.53678, 0.048392, 0.7507095174456102, 0.975677, 0.543798, 0.043618, 0.7627221928955186, 0.977092, 0.55085, 0.03905, 0.7747318054501056, 0.978422, 0.557937, 0.034931, 0.7867444809000144, 0.979666, 0.565057, 0.031409, 0.7987540934546018, 0.980824, 0.572209, 0.028508, 0.8107667689045102, 0.981895, 0.579392, 0.02625, 0.8227763814590972, 0.982881, 0.586606, 0.024661, 0.834789056909006, 0.983779, 0.593849, 0.02377, 0.8468017323589148, 0.984591, 0.601122, 0.023606, 0.8588113449135018, 0.985315, 0.608422, 0.024202, 0.8708240203634101, 0.985952, 0.61575, 0.025592, 0.8828336329179975, 0.986502, 0.623105, 0.027814, 0.8948463083679064, 0.986964, 0.630485, 0.030908, 0.9068559209224933, 0.987337, 0.63789, 0.034916, 0.9188685963724021, 0.987622, 0.64532, 0.039886, 0.9308812718223105, 0.987819, 0.652773, 0.045581, 0.9428908843768979, 0.987926, 0.66025, 0.05175, 0.9549035598268063, 0.987945, 0.667748, 0.058329, 0.9669131723813937, 0.987874, 0.675267, 0.065257, 0.9789258478313021, 0.987714, 0.682807, 0.072489, 0.9909354603858895, 0.987464, 0.690366, 0.07999, 1.0029481358357983, 0.987124, 0.697944, 0.087731, 1.0149608112857067, 0.986694, 0.70554, 0.095694, 1.0269704238402937, 0.986175, 0.713153, 0.103863, 1.038983099290202, 0.985566, 0.720782, 0.112229, 1.05099271184479, 0.984865, 0.728427, 0.120785, 1.0630053872946983, 0.984075, 0.736087, 0.129527, 1.0750149998492853, 0.983196, 0.743758, 0.138453, 1.087027675299194, 0.982228, 0.751442, 0.147565, 1.0990403507491024, 0.981173, 0.759135, 0.156863, 1.1110499633036899, 0.980032, 0.766837, 0.166353, 1.1230626387535982, 0.978806, 0.774545, 0.176037, 1.1350722513081857, 0.977497, 0.782258, 0.185923, 1.147084926758094, 0.976108, 0.789974, 0.196018, 1.1590945393126815, 0.974638, 0.797692, 0.206332, 1.1711072147625903, 0.973088, 0.805409, 0.216877, 1.1831198902124986, 0.971468, 0.813122, 0.227658, 1.1951295027670856, 0.969783, 0.820825, 0.238686, 1.2071421782169944, 0.968041, 0.828515, 0.249972, 1.2191517907715819, 0.966243, 0.836191, 0.261534, 1.2311644662214902, 0.964394, 0.843848, 0.273391, 1.2431740787760772, 0.962517, 0.851476, 0.285546, 1.255186754225986, 0.960626, 0.859069, 0.29801, 1.2671963667805735, 0.95872, 0.866624, 0.31082, 1.2792090422304818, 0.956834, 0.874129, 0.323974, 1.2912217176803902, 0.954997, 0.881569, 0.337475, 1.3032313302349776, 0.953215, 0.888942, 0.351369, 1.3152440056848864, 0.951546, 0.896226, 0.365627, 1.3272536182394734, 0.950018, 0.903409, 0.380271, 1.3392662936893818, 0.948683, 0.910473, 0.395289, 1.3512759062439692, 0.947594, 0.917399, 0.410665, 1.363288581693878, 0.946809, 0.924168, 0.426373, 1.3753012571437864, 0.946392, 0.930761, 0.442367, 1.3873108696983738, 0.946403, 0.937159, 0.458592, 1.3993235451482822, 0.946903, 0.943348, 0.47497, 1.4113331577028696, 0.947937, 0.949318, 0.491426, 1.423345833152778, 0.949545, 0.955063, 0.50786, 1.4353554457073654, 0.95174, 0.960587, 0.524203, 1.4473681211572738, 0.954529, 0.965896, 0.540361, 1.4593807966071826, 0.957896, 0.971003, 0.556275, 1.47139040916177, 0.961812, 0.975924, 0.571925, 1.4834030846116784, 0.966249, 0.980678, 0.587206, 1.4954126971662653, 0.971162, 0.985282, 0.602154, 1.5074253726161742, 0.976511, 0.989753, 0.61676, 1.5194349851707616, 0.982257, 0.994109, 0.631017, 1.53144766062067, 0.988362, 0.998364, 0.644924]
densityLUT.NanColor = [0.0, 1.0, 0.0]
densityLUT.ScalarRangeInitialized = 1.0

# get opacity transfer function/opacity map for 'density'
densityPWF = GetOpacityTransferFunction('density')
densityPWF.Points = [-1.53144766062067, 0.9508929252624512, 0.5, 0.0, -5.809297487502363e-09, 0.0, 0.5, 0.0, 1.53144766062067, 1.0, 0.5, 0.0]
densityPWF.ScalarRangeInitialized = 1

# trace defaults for the display properties.
ippl_scalarDisplay.Representation = 'Volume'
ippl_scalarDisplay.ColorArrayName = ['CELLS', 'density']
ippl_scalarDisplay.LookupTable = densityLUT
ippl_scalarDisplay.SelectTCoordArray = 'None'
ippl_scalarDisplay.SelectNormalArray = 'None'
ippl_scalarDisplay.SelectTangentArray = 'None'
ippl_scalarDisplay.OSPRayScaleFunction = 'Piecewise Function'
ippl_scalarDisplay.Assembly = 'Hierarchy'
ippl_scalarDisplay.SelectOrientationVectors = 'None'
ippl_scalarDisplay.ScaleFactor = 2.0
ippl_scalarDisplay.SelectScaleArray = 'None'
ippl_scalarDisplay.GlyphType = 'Arrow'
ippl_scalarDisplay.GlyphTableIndexArray = 'None'
ippl_scalarDisplay.GaussianRadius = 0.1
ippl_scalarDisplay.SetScaleArray = [None, '']
ippl_scalarDisplay.ScaleTransferFunction = 'Piecewise Function'
ippl_scalarDisplay.OpacityArray = [None, '']
ippl_scalarDisplay.OpacityTransferFunction = 'Piecewise Function'
ippl_scalarDisplay.DataAxesGrid = 'Grid Axes Representation'
ippl_scalarDisplay.PolarAxes = 'Polar Axes Representation'
ippl_scalarDisplay.ScalarOpacityUnitDistance = 8.660254037844387
ippl_scalarDisplay.ScalarOpacityFunction = densityPWF
ippl_scalarDisplay.TransferFunction2D = densityTF2D
ippl_scalarDisplay.OpacityArrayName = ['CELLS', 'density']
ippl_scalarDisplay.ColorArray2Name = ['CELLS', 'density']
ippl_scalarDisplay.SliceFunction = 'Plane'
ippl_scalarDisplay.Slice = 2
ippl_scalarDisplay.SelectInputVectors = [None, '']
ippl_scalarDisplay.WriteLog = ''

# init the 'Plane' selected for 'SliceFunction'
ippl_scalarDisplay.SliceFunction.Origin = [10.0, 10.0, 10.0]

# setup the color legend parameters for each legend in this view

# get color legend/bar for densityLUT in view renderView1
densityLUTColorBar = GetScalarBar(densityLUT, renderView1)
densityLUTColorBar.Title = 'density'
densityLUTColorBar.ComponentTitle = ''

# set color bar visibility
densityLUTColorBar.Visibility = 1

# show color legend
ippl_scalarDisplay.SetScalarBarVisibility(renderView1, True)

# ----------------------------------------------------------------
# setup color maps and opacity maps used in the visualization
# note: the Get..() functions create a new object, if needed
# ----------------------------------------------------------------

# ----------------------------------------------------------------
# setup animation scene, tracks and keyframes
# note: the Get..() functions create a new object, if needed
# ----------------------------------------------------------------

# get the time-keeper
timeKeeper1 = GetTimeKeeper()

# initialize the timekeeper

# get time animation track
timeAnimationCue1 = GetTimeTrack()

# initialize the animation track

# get animation scene
animationScene1 = GetAnimationScene()

# initialize the animation scene
animationScene1.ViewModules = renderView1
animationScene1.Cues = timeAnimationCue1
animationScene1.AnimationTime = 0.0

# initialize the animation scene

# ----------------------------------------------------------------
# setup extractors
# ----------------------------------------------------------------

# create extractor
pNG2 = CreateExtractor('PNG', renderView1, registrationName='PNG2')
# trace defaults for the extractor.
pNG2.Trigger = 'Time Step'

# init the 'Time Step' selected for 'Trigger'
pNG2.Trigger.Frequency = 5

# init the 'PNG' selected for 'Writer'
pNG2.Writer.FileName = 'PTrap_sField_RenderView1_{timestep:06d}{camera}.png'
pNG2.Writer.ImageResolution = [1247, 1176]
pNG2.Writer.Format = 'PNG'

# ----------------------------------------------------------------
# restore active source
SetActiveSource(pNG2)
# ----------------------------------------------------------------

# ------------------------------------------------------------------------------
# Catalyst options
from paraview import catalyst
options = catalyst.Options()
options.ExtractsOutputDirectory = 'datasets_test'
options.GlobalTrigger = 'Time Step'
options.CatalystLiveTrigger = 'Time Step'

# ------------------------------------------------------------------------------
if __name__ == '__main__':
    from paraview.simple import SaveExtractsUsingCatalystOptions
    # Code for non in-situ environments; if executing in post-processing
    # i.e. non-Catalyst mode, let's generate extracts using Catalyst options
    SaveExtractsUsingCatalystOptions(options)
